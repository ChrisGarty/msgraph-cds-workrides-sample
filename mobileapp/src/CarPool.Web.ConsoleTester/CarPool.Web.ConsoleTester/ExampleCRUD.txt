using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SdkConsoleApp
{
    using Microsoft.CommonDataService;
    using Microsoft.CommonDataService.CommonEntitySets;
    using Microsoft.CommonDataService.Configuration;
    using Microsoft.CommonDataService.ServiceClient.Security;
    using Microsoft.CommonDataService.Expressions;
    using Microsoft.CommonDataService.Statements;

    using System.Threading.Tasks; // Needed for async

    class ExampleCRUD
    {

        // TEST
        //public void DeleteSetBaseStatement()
        //{
        //    var deleteSetStatement = new DeleteSetStatement();

        //    deleteSetStatement.From = new FromClause()
        //    {
        //        Alias = "A",
        //        EntitySet = TestHelper.GetEntitySetRef<Student>()
        //    };

        //    ExpressionContainer expressionRecIdFilter = RelationalQueryBuilderHelper.EqualComparisonOperator(
        //                                                        RelationalQueryBuilderHelper.CreateField("A", DataServiceConstants.RecIdFieldName),
        //                                                        RelationalQueryBuilderHelper.CreateInt64Literal(1));

        //    ExpressionContainer expressionEtagFilter = RelationalQueryBuilderHelper.EqualComparisonOperator(
        //                                                       RelationalQueryBuilderHelper.CreateField("A", DataServiceConstants.RecVersionFieldName),
        //                                                       RelationalQueryBuilderHelper.CreateInt64Literal(2));

        //    ExpressionContainer andFilterExpression = RelationalQueryBuilderHelper.AndOperator(
        //                                                       expressionRecIdFilter,
        //                                                       expressionEtagFilter);

        //    deleteSetStatement.AddWhereExpression(andFilterExpression);

        //    var sqlResult = deleteSetStatement.ToSql();

        //    sqlResult.Should().Be("DELETE T1 FROM [dbo].[RTSStudent] T1 WHERE ((T1.[RECID] = @P1) AND (T1.[RECVERSION] = @P2));");
        //}


        private static async Task JoepExample(Client client)
        {
            var query = client.GetRelationalEntitySet<Quotation>()
                .CreateQueryBuilder()
                .InnerJoin<Account>(q => q.Account)
                .Project(
                    q => q.SelectField(c => c.QuotationId).SelectField(c => c.Name),
                    a => a.SelectField(c => c.AccountId));

            var res = query.CreateQueryResultType();
            await client.CreateRelationalBatchExecuter(RelationalBatchExecutionMode.Transactional)
                .Query(query, out res)
                .ExecuteAsync();


            //.GetRelationalEntitySet<Quotation>()
            //    .CreateQueryBuilder()
            //    .InnerJoin<Account>(q => q.Account)
            //    .Project(
            //        q => q.SelectField(c => c.QuotationId).SelectField(c => c.Name),
            //        a => a.SelectField(c => c.AccountId));

            //var res = query.CreateQueryResultType();
            //await client.CreateRelationalBatchExecuter(RelationalBatchExecutionMode.Transactional)
            //    .Query(query, out res)
            //    .ExecuteAsync(

            foreach(var r in res.Result)
            {
                Console.WriteLine(r.Item1);
            }
        }

        private static async Task TakeExampleAsync(Client client)
        {
            var query = client.GetRelationalEntitySet<Product>()
                .CreateQueryBuilder()
                .OrderByDescending(p => new object[] { p.SellingUnitPrice })
                .Project(p => p.SelectField(f => f.SellingUnitPrice)
                    .SelectField(f => f.Name)
                    .SelectField(f => f.Description))
                .Take(3);

            OperationResult<IReadOnlyList<Product>> queryResult = null;
            await client.CreateRelationalBatchExecuter(
                RelationalBatchExecutionMode.Transactional)
                .Query(query, out queryResult)
                .ExecuteAsync();

            foreach (var product in queryResult.Result)
            {
                Console.WriteLine(product.SellingUnitPrice.ToString() + ": " + product.Name);
            }
        }

        private static async Task TakeAndSkipExampleAsync(Client client)
        {
            var query = client.GetRelationalEntitySet<Product>()
                .CreateQueryBuilder()
                .OrderByDescending(p => new object[] { p.SellingUnitPrice })
                .Project(p => p.SelectField(f => f.SellingUnitPrice)
                    .SelectField(f => f.Name)
                    .SelectField(f => f.Description))
                .Skip(3).Take(3);

            OperationResult<IReadOnlyList<Product>> queryResult = null;
            await client.CreateRelationalBatchExecuter(
                RelationalBatchExecutionMode.Transactional)
                .Query(query, out queryResult)
                .ExecuteAsync();

            foreach (var product in queryResult.Result)
            {
                Console.WriteLine(product.SellingUnitPrice.ToString() + ": " + product.Name);
            }
        }

        static async Task SimpleSelectAsync(Client client)
        {
            var queryBuilder = client.GetRelationalEntitySet<ProductCategory>()
                .CreateQueryBuilder();

            var query = queryBuilder
                .Where(pc => pc.Name == "Electronics")
                .OrderByAscending(pc => new object[] { pc.CategoryId })
                .Project(pc => pc.SelectField(f => f.CategoryId)
                    .SelectField(f => f.Name)
                    .SelectField(f => f.Description));

            // Execute the query:
            OperationResult<IReadOnlyList<ProductCategory>> queryResult = null;
            var executor = client.CreateRelationalBatchExecuter(
                RelationalBatchExecutionMode.Transactional)
                .Query(query, out queryResult);

            await executor.ExecuteAsync();

            foreach (var pc in queryResult.Result)
            {
                Console.WriteLine(pc.Name);
            }
        }

        static async Task SelectWithJoinAsync(Client client)
        {
            // In this example we will do a query where we join the
            // ProductCategory and the Product entityset.
            var query = client.GetRelationalEntitySet<Product>()
                .CreateQueryBuilder()
                .InnerJoin(p => p.ProductCategory)
                .OrderByAscending((p, pc) => new object[] { pc.Name })
                .Project(
                    p => p.SelectField(f => f.Name),
                    pc => pc.SelectField(f => f.Name).SelectField(f => f.CategoryId)
                );

            OperationResult<IReadOnlyList<Tuple<Product, ProductCategory>>> result = null;

            await client.CreateRelationalBatchExecuter(
                RelationalBatchExecutionMode.Transactional)
                .Query(query, out result)
                .ExecuteAsync();

            foreach (var values in result.Result)
            {
                Product p = values.Item1;
                ProductCategory pc = values.Item2;

                Console.WriteLine("Category: " + pc.Name + " contains " + p.Name);
            }

        }

        static async Task SelectWithZipAsync(Client client)
        {
            // In this example we will do a query where we join the
            // ProductCategory and the Product entityset explicitly.

            /*            
            var producedProductQuery = producedProducts
                .CreateQueryBuilder()
                .InnerZip<ProductVarianceCalc>((pp, p) => pp.ProductId == p.Id)
                .Where((pp, p) => pp.ProductionOrderId == order.Id)
                .Project(
                    pp => pp.SelectField(i => i.Quantity).SelectField(i => i.QuantityUoM).SelectField(i => i.ProductId)
                    .IncludeRelated(i => i.ProductPrice)
                        .ProjectRelated(price => price.SelectField(i => i.PriceQtyUoM))
                    .IncludeRelated(i => i.Product)
                        .ProjectRelated(product => product.SelectField(i => i.CostingMethod).SelectField(i => i.InventoryUnit)),
                    price => price.SelectField(i => i.CostingMethod));

*/

            var query = client.GetRelationalEntitySet<Product>()
                .CreateQueryBuilder()
                .InnerZip<ProductCategory>((p, pc) => p.ProductCategory.Entity.CategoryId == pc.CategoryId)
                .OrderByAscending((p, pc) => new object[] { pc.Name })
                .Project(
                    p => p.SelectField(f => f.Name),
                    pc => pc.SelectField(f => f.Name).SelectField(f => f.CategoryId)
                );

            OperationResult<IReadOnlyList<Tuple<Product, ProductCategory>>> result = null;

            await client.CreateRelationalBatchExecuter(
                RelationalBatchExecutionMode.Transactional)
                .Query(query, out result)
                .ExecuteAsync();

            foreach (var values in result.Result)
            {
                Product p = values.Item1;
                ProductCategory pc = values.Item2;

                Console.WriteLine("Category: " + pc.Name + " contains " + p.Name);
            }

        }

        static async Task SelectWithRelatedAsync(Client client)
        {
            var query = client.GetRelationalEntitySet<Product>()
                .CreateQueryBuilder()
                .Project(builder => builder.SelectField(p => p.Name)
                    .IncludeRelated(f => f.ProductCategory)
                    .ProjectRelated(pc => pc.SelectField(f => f.Name)));

            OperationResult<IReadOnlyList<Product>> result = null;

            await client.CreateRelationalBatchExecuter(
                RelationalBatchExecutionMode.Transactional)
                .Query(query, out result)
                .ExecuteAsync();

            foreach (Product p in result.Result)
            {
                Console.WriteLine("Product " + p.Name + " in category: " + p.ProductCategory.Entity.Name);
            }
        }

        static async Task SelectWithRelated1Async(Client client)
        {
            var query = client.GetRelationalEntitySet<ProductCategory>()
                .CreateQueryBuilder()
                .Project(builder => builder.SelectField(pc => pc.Name)
                    .IncludeRelated(pc => pc.Product_ProductCategory)
                    .ProjectRelated(p => p.SelectField(f => f.Name)));

            OperationResult<IReadOnlyList<ProductCategory>> result = null;

            await client.CreateRelationalBatchExecuter(
                RelationalBatchExecutionMode.Transactional)
                .Query(query, out result)
                .ExecuteAsync();

            foreach (ProductCategory pc in result.Result)
            {
                Console.WriteLine("Product category " + pc.Name);
                foreach (var p in pc.Product_ProductCategory)
                {
                    Console.WriteLine("     Product " + p.Entity.Name);
                }
            }
        }

        private static async Task UpdateExampleAsync(Client client)
        {
            // In this example we will markup our product prices by 10 percent
            var query = client.GetRelationalEntitySet<Product>()
                .CreateQueryBuilder()
                .Project(p => p.SelectField(f => f.SellingUnitPrice));

            OperationResult<IReadOnlyList<Product>> allProducts = null;
            await client.CreateRelationalBatchExecuter(
                RelationalBatchExecutionMode.Transactional)
                .Query(query, out allProducts)
                .ExecuteAsync();

            var updateExecutor = client.CreateRelationalBatchExecuter(
                RelationalBatchExecutionMode.Transactional);

            foreach (Product entry in allProducts.Result)
            {
                ITypedRelationalFieldUpdates<Product> updates = 
                    client.CreateRelationalFieldUpdates<Product>();

                Currency newPrice = new Currency()
                {
                    Amount = entry.SellingUnitPrice.Amount * 1.10m,
                    Code = entry.SellingUnitPrice.Code
                };
                updates.Update(pc => pc.SellingUnitPrice, newPrice);

                updateExecutor.Update(entry, updates);
            }

            await updateExecutor.ExecuteAsync();
        }

        private static async Task InsertAsync(Client client)
        {
            // Insert Surface and Phone product lines
            var surfaceCategory = new ProductCategory()
            {
                Name = "Surface",
                Description = "Surface produce line"
            };
            var phoneCategory = new ProductCategory()
            {
                Name = "Phone",
                Description = "Phone produce line"
            };

            var executor = client.CreateRelationalBatchExecuter(
                    RelationalBatchExecutionMode.Transactional);

            executor
                .Insert(surfaceCategory)
                .Insert(phoneCategory);

            await executor.ExecuteAsync();
        }

        static async Task SimpleDeleteTestAsync(Client client)
        {
            var query = client.GetRelationalEntitySet<ProductCategory>()
                .CreateQueryBuilder()
                .Where(pc => pc.Name == "Surface" || pc.Name == "Phone")
                .Project(pc => pc.SelectField(f => f.CategoryId)
                    .SelectField(f => f.Name));

            OperationResult<IReadOnlyList<ProductCategory>> queryResult = null;
            await client.CreateRelationalBatchExecuter(
                RelationalBatchExecutionMode.Transactional)
                .Query(query, out queryResult)
                .ExecuteAsync();

            // Delete any Surfaces and Phones by looping through the results of the query
            var deleteExecutor = client.CreateRelationalBatchExecuter(
                RelationalBatchExecutionMode.Transactional);

            // Loop through results and insert rows in delete executor
            foreach (var entry in queryResult.Result)
            {
                deleteExecutor.Delete(entry);
            }

            // Goodbye data...
            await deleteExecutor.ExecuteAsync();

            // Insert, so we can run the test again
            var surfaceCategory = new ProductCategory() { Name = "Surface", Description = "Surface produce line" };
            var phoneCategory = new ProductCategory() { Name = "Phone", Description = "Phone produce line" };
            await client.CreateRelationalBatchExecuter(RelationalBatchExecutionMode.Transactional)
                        .Insert(surfaceCategory)
                        .Insert(phoneCategory)
                        .ExecuteAsync();
        }

        static void Main(string[] args)
        {
            using (var client = ConnectionSettings.Instance.CreateClient().Result)
            {
                Task.Run(async () => await SelectWithJoinAsync(client));
            }
            System.Console.ReadLine();

        }
    }
}
